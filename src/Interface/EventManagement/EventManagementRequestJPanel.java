/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface.EventManagement;

/**
 *
 * @author mansi
 * import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organisation.EventManagementOrganization;
import Business.Organisation.Organisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EventMgmtWorkRequest;
import Business.WorkQueue.MaintenanceRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ankit
 */
public class EventManagementRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EventManagementRequestJPanel
     */

     JPanel userProcessContainer;
    UserAccount account;
    EventManagementOrganization organization;
    Enterprise enterprise;
    Ecosystem business;

    EventManagementRequestJPanel(JPanel userProcessContainer, UserAccount account, Organisation organization, Enterprise enterprise, Ecosystem business) {

        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = (EventManagementOrganization) organization;
        this.enterprise = enterprise;
        this.business = business;
        populateTable();
        populateComboBox();
    }
    
    public void populateTable(){
        
        
        System.out.println(organization.getWorkQueue().getReqList().size());

        DefaultTableModel dtm = (DefaultTableModel) eventMgmtReqJTable.getModel();
        //  productCatalogTbl.getColumn("Image").setCellRenderer(new ManageProductsJPanel.LabelRenderer());
        dtm.setRowCount(0);

        for (Iterator<WorkRequest> it = organization.getWorkQueue().getReqList().iterator(); it.hasNext();) {
            EventMgmtWorkRequest wr = (EventMgmtWorkRequest) it.next();
            Object Row[] = new Object[8];
            Row[0] = wr.getCust();
            Row[1] = wr;
            Row[2] = wr.getEvents().getEventDescription();
            Row[3] = wr.getEvents().getEventCapacity();
            Row[4] = wr.getEvents().getLocation();
            Row[5] = wr.getRequestDate();
            Row[6] = wr.getReceiver();
            Row[7] = wr.getEvents().getStatus();
            dtm.addRow(Row);

        }
        
    }
    
    public void populateComboBox(){
          for (Employee e : organization.getEmpList().getEmployeeDirectory()) {
            AvailablePersonComboBox.addItem(e);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        AssignBtn = new javax.swing.JButton();
        AvailablePersonComboBox = new javax.swing.JComboBox<>();
        completeReqJBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventMgmtReqJTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        cancelOrderJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AssignBtn.setText("Assign to:");
        AssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignBtnActionPerformed(evt);
            }
        });
        add(AssignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(546, 223, 131, -1));

        add(AvailablePersonComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(695, 224, 175, -1));

        completeReqJBtn.setText("Complete");
        completeReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeReqJBtnActionPerformed(evt);
            }
        });
        add(completeReqJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 223, 121, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Event Management:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Event Management Requests:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, -1, -1));

        eventMgmtReqJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Detail", "Event Name", "Event Description", "Attendees", "Location", "Request Date", "Assigned To", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(eventMgmtReqJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 79, 1120, 126));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 264, -1, -1));

        cancelOrderJBtn.setText("Cancel Request");
        cancelOrderJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderJBtnActionPerformed(evt);
            }
        });
        add(cancelOrderJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 223, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/event-distribution.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, -1, -1));
    }// </editor-fold>                        

    private void AssignBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already completed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            System.out.println("emp size: " + emp.getWorkQueue().getReqList().size());
            //  Row[4]= em.getEmpUserAcc().getWorkQueue().getReqList().size())
        wr.setReceiver(emp.getEmpUserAcc());
        wr.setSender(account);
        JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTable();

        } else if (wr.getReceiver().equals(emp.getEmpUserAcc())) {
            JOptionPane.showMessageDialog(null, "The request is already assigned to you", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {

            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            if(wr.getReceiver()!=null){
                wr.getReceiver().getWorkQueue().getReqList().remove(wr);
            }
            wr.setReceiver(emp.getEmpUserAcc());
            wr.setSender(account);
            wr.getCust().getNotification().addNotification(wr);

            JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

            populateTable();
        }
    }                                         

    private void completeReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:

        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);
        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "This request has already been closed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign to a user first then resolve.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

//        double charges = 0;
//        try {
//            charges = Double.parseDouble(mainChargeJTxtField.getText());
//        } catch (NumberFormatException numberFormatException) {
//
//            JOptionPane.showMessageDialog(null, "Please enter a valid value in number format.", "Warning", JOptionPane.WARNING_MESSAGE);
//            return;
//
//        }

        wr.setStatus("CLOSED");
        wr.setMessage("The event has been approved.");
        Date resolveDate = new Date();
        wr.setResolveDate(resolveDate);
        wr.getEvents().setStatus("APPROVED");
        //        double walletAcc= wr.getCust().getWallet();
        //        double newWalletAmt= walletAcc-charges;
        //        wr.getCust().setWallet(newWalletAmt);



        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been completed. " , "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        populateTable();
    }                                               

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }                                       

    private void cancelOrderJBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                
        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already closed and can cot be cancelled", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        wr.setStatus("CANCELLED");
        Date date = new Date();
        wr.setResolveDate(date);
        wr.setMessage("This event has been cancelled by event administration of society.");
        wr.getEvents().setStatus("CANCELLED");

        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been successfully cancelled", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTable();
    }                                               


                 
}
 */
public class EventManagementRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EventManagementRequestJPanel
     */
    public EventManagementRequestJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AssignBtn = new javax.swing.JButton();
        AvailablePersonComboBox = new javax.swing.JComboBox<>();
        completeReqJBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventMgmtReqJTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        cancelOrderJBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        AssignBtn.setText("Assign to:");
        AssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignBtnActionPerformed(evt);
            }
        });

        completeReqJBtn.setText("Complete");
        completeReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeReqJBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Event Management:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Event Management Requests:");

        eventMgmtReqJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Detail", "Event Name", "Event Description", "Attendees", "Location", "Request Date", "Assigned To", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(eventMgmtReqJTable);

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        cancelOrderJBtn.setText("Cancel Request");
        cancelOrderJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1310, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(139, 139, 139)
                            .addComponent(cancelOrderJBtn))
                        .addComponent(backBtn)
                        .addComponent(completeReqJBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(685, 685, 685)
                            .addComponent(AvailablePersonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel2)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(536, 536, 536)
                            .addComponent(AssignBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 771, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(11, 11, 11)
                            .addComponent(jLabel3)
                            .addGap(46, 46, 46)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cancelOrderJBtn)
                            .addGap(19, 19, 19)
                            .addComponent(backBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(223, 223, 223)
                            .addComponent(completeReqJBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(224, 224, 224)
                            .addComponent(AvailablePersonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(jLabel2))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(223, 223, 223)
                            .addComponent(AssignBtn))
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AssignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignBtnActionPerformed
        // TODO add your handling code here:
        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already completed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            System.out.println("emp size: " + emp.getWorkQueue().getReqList().size());
            //  Row[4]= em.getEmpUserAcc().getWorkQueue().getReqList().size())
        wr.setReceiver(emp.getEmpUserAcc());
        wr.setSender(account);
        JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTable();

        } else if (wr.getReceiver().equals(emp.getEmpUserAcc())) {
            JOptionPane.showMessageDialog(null, "The request is already assigned to you", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {

            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            if(wr.getReceiver()!=null){
                wr.getReceiver().getWorkQueue().getReqList().remove(wr);
            }
            wr.setReceiver(emp.getEmpUserAcc());
            wr.setSender(account);
            wr.getCust().getNotification().addNotification(wr);

            JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

            populateTable();
        }
    }//GEN-LAST:event_AssignBtnActionPerformed

    private void completeReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeReqJBtnActionPerformed
        // TODO add your handling code here:

        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);
        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "This request has already been closed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign to a user first then resolve.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        //        double charges = 0;
        //        try {
            //            charges = Double.parseDouble(mainChargeJTxtField.getText());
            //        } catch (NumberFormatException numberFormatException) {
            //
            //            JOptionPane.showMessageDialog(null, "Please enter a valid value in number format.", "Warning", JOptionPane.WARNING_MESSAGE);
            //            return;
            //
            //        }

        wr.setStatus("CLOSED");
        wr.setMessage("The event has been approved.");
        Date resolveDate = new Date();
        wr.setResolveDate(resolveDate);
        wr.getEvents().setStatus("APPROVED");
        //        double walletAcc= wr.getCust().getWallet();
        //        double newWalletAmt= walletAcc-charges;
        //        wr.getCust().setWallet(newWalletAmt);

        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been completed. " , "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        populateTable();
    }//GEN-LAST:event_completeReqJBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void cancelOrderJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderJBtnActionPerformed
        int row = eventMgmtReqJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventMgmtReqJTable.getValueAt(row, 1);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already closed and can cot be cancelled", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        wr.setStatus("CANCELLED");
        Date date = new Date();
        wr.setResolveDate(date);
        wr.setMessage("This event has been cancelled by event administration of society.");
        wr.getEvents().setStatus("CANCELLED");

        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been successfully cancelled", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTable();
    }//GEN-LAST:event_cancelOrderJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignBtn;
    private javax.swing.JComboBox<Object> AvailablePersonComboBox;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton cancelOrderJBtn;
    private javax.swing.JButton completeReqJBtn;
    private javax.swing.JTable eventMgmtReqJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
