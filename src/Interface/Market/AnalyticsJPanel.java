/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Interface.Market;

/**
 *
 * @author mansi
 */
public class AnalyticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyticsJPanel
     */
    public AnalyticsJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        BackJBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Market Analytics");

        jButton1.setText("Work Requests vs Product Type");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cash In Flow(Money vs Time)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Retailer Requests ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Pending vs Completed Requests");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Customer vs Products");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        BackJBtn.setText("<< Back");
        BackJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1690, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(286, 286, 286)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addComponent(BackJBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1690, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jLabel1)
                            .addGap(23, 23, 23)
                            .addComponent(jButton1)
                            .addGap(19, 19, 19)
                            .addComponent(jButton2)
                            .addGap(19, 19, 19)
                            .addComponent(jButton3)
                            .addGap(19, 19, 19)
                            .addComponent(jButton4)
                            .addGap(169, 169, 169)
                            .addComponent(BackJBtn))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(210, 210, 210)
                            .addComponent(jButton5))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        JFreeChart chart = ChartFactory.createBarChart3D("Requests numbers vs Products", "Products:", "Number of Requests:", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests and Products", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        int prod = 0;
        DeliverWorkRequest dwr;

        for (GroceryProduct gp : groceryOrganisation.getGroceryProductDirectory()) {
            for (WorkRequest wr : groceryOrganisation.getWorkQueue().getReqList()) {
                if ((wr instanceof DeliverWorkRequest) && (wr.getProduct() != null)) {
                    System.out.println(wr.getProduct().getName());
                    System.out.println(gp.getProdName());

                    if (wr.getProduct().getName().equals(gp.getProdName())) {
                        prod++;
                    }

                }

            }
            dataset.setValue(prod, "Qty", gp.getProdName());
            prod = 0;

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        TimeSeries s1 = new TimeSeries("Time vs Money");
        TimeSeriesCollection dataset1 = new TimeSeriesCollection();
        final JFreeChart chart1 = ChartFactory.createTimeSeriesChart("Time vs Money",
            "Timestamp",
            "Money", dataset1,
            true,
            true,
            false);

        //dataset.setValue(charges2,"Charges:",days2);
        Wallet wallet = groceryOrganisation.getWalletObj();
        LinkedHashMap<WorkRequest, Double> mp = wallet.getTransactionList();
        int count=0;
        Iterator it = mp.entrySet().iterator();
        while (it.hasNext()) {
            count++;
            Map.Entry pair = (Map.Entry) it.next();
            WorkRequest wr = (WorkRequest) pair.getKey();
            double amt = (double) pair.getValue();
            if (wr.getResolveDate() != null&&count<33) {
                s1.add(new Millisecond(wr.getResolveDate()), amt);
            }

        }
        dataset1.addSeries(s1);

        ChartFrame frame1 = new ChartFrame("Chart For Analysis of transaction of Money", chart1);
        frame1.setVisible(true);
        frame1.setSize(800, 680);
        XYPlot p1 = chart1.getXYPlot();
        p1.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        JFreeChart chart = ChartFactory.createLineChart3D("Product Quantity vs products ", "Products:", "Number of Requests:", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests and Products", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        int prod_qty = 0;
        DeliverWorkRequest dwr;

        for (GroceryProduct gp : groceryOrganisation.getGroceryProductDirectory()) {
            for (WorkRequest wr : retailerOrganisation.getWorkQueue().getReqList()) {
                if ((wr instanceof DeliverWorkRequest) && (wr.getGroceryProduct() != null)) {
                    //                                System.out.println(wr.getProduct().getName());
                    //                              System.out.println(gp.getProdName());

                    if (wr.getGroceryProduct().getProdName().equals(gp.getProdName())) {
                        prod_qty = prod_qty + 70;
                    }

                }

            }
            dataset.setValue(prod_qty, "Qty", gp.getProdName());
            prod_qty = 0;

        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        int Delivered_req = 0;
        int cancelled = 0;
        int other_req = 0;
        int auto_comp = 0;

        for (WorkRequest wr : groceryOrganisation.getWorkQueue().getReqList()) {
            if (wr instanceof DeliverWorkRequest) {
                System.out.println(wr.getStatus());
                if (wr.getStatus().equals("Delivered")) {
                    Delivered_req++;
                } else if (wr.getStatus().equals("Cancelled")) {
                    cancelled++;
                } else if (wr.getStatus().equals("Automatically completed by Retailer")) {
                    auto_comp++;
                } else {
                    other_req++;
                }
            }

        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(Delivered_req, "Requests", "Delivered");
        dataset.setValue(cancelled, "Requests", "Cancelled");
        dataset.setValue(other_req, "Requests", "Pending");
        dataset.setValue(auto_comp, "Requests", "Completed Retailer");

        JFreeChart chart = ChartFactory.createBarChart("Requests Type Analysis", "Request names", "Requests", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        //        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //
        //        JFreeChart chart = ChartFactory.createBarChart3D("Requests numbers vs Products", "Products:", "Number of Requests:", dataset, PlotOrientation.VERTICAL, false, true, false);
        //        CategoryPlot p = chart.getCategoryPlot();
        //        p.setRangeGridlinePaint(Color.black);
        //        ChartFrame frame = new ChartFrame("Bar Chart for Requests and Products", chart);
        //        frame.setVisible(true);
        //        frame.setSize(450, 350);
        //        int prod = 0;
        //        DeliverWorkRequest dwr;
        //
        //
        //        int size = (groceryOrganisation.getWorkQueue().getReqList()).size();
        //        for(int i =0;i<size;i++)
        //        {
            //            int cus;
            //            for(int j=i+1;j<size;j++)
            //            {
                //
                //            }
            //        }
        //
        //        for(int i =1;i<size;i++)
        //            for (WorkRequest wr : groceryOrganisation.getWorkQueue().getReqList().get(i)) {
            //                if ((wr instanceof DeliverWorkRequest) && (wr.getProduct() != null)) {
                //
                //
                //                }
            //
            //
            //            dataset.setValue(prod, "Qty", gp.getProdName());
            //            prod = 0;
            //
            //        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //HashMap<Integer, String> hm = new HashMap<Integer, String>();

        HashMap<String,Integer> hm = new HashMap<String,Integer>();

        JFreeChart chart = ChartFactory.createBarChart3D("Requests Type Analysis", "Request names", "Requests", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        boolean flag;

        for (WorkRequest wr : groceryOrganisation.getWorkQueue().getReqList()) {
            if ((wr instanceof DeliverWorkRequest)&&(wr.getCust()!=null)&&(wr.getProduct()!=null)) {

                if(hm.isEmpty())
                {
                    hm.put(wr.getCust().getFirst_name(), wr.getProduct().getProductQuant());
                }
                else
                {
                    Iterator it = hm.entrySet().iterator();

                    while (it.hasNext()) {

                        Map.Entry pair = (Map.Entry) it.next();
                        System.out.println(pair.getKey() + " = " + pair.getValue());

                        //String c = (String) pair.getKey();

                        int qty = (int) pair.getValue();

                        if (hm.containsKey(wr.getCust().getFirst_name())) {
                            //qty=qty+wr.getProduct().getProductQuant();
                            hm.put(wr.getCust().getFirst_name(), wr.getProduct().getProductQuant() + qty);
                        }

                        else
                        {
                            hm.put(wr.getCust().getFirst_name(), wr.getProduct().getProductQuant());
                        }

                    }
                }

                //hm.put(wr.getProduct().getName(), wr.getProduct().getProductQuant());
                //dataset.setValue(wr.getProduct().getProductQuant(), "Qty", wr.getProduct().getName());
            }
        }

        Iterator it = hm.entrySet().iterator();

        while(it.hasNext()){
            Map.Entry pair = (Map.Entry)it.next();
            String name = (String) pair.getKey();
            Integer qty = (Integer) pair.getValue();
            dataset.setValue(qty,"Qty",name);

        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void BackJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackJBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
